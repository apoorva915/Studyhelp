const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  const fs = require("node:fs");
  const mime = require("mime-types");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.5-pro-preview-03-25",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 65536,
    responseModalities: [
    ],
    responseMimeType: "application/json",
  };
  
    export const courseOutlineAIModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate a study material for Python for Exam and level of difficulty will be Easy with summary of course, List of Chapters along with summary for each chapter, Topic list in each chapter in JSON format"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "Here's a thinking process that could lead to the Python study material:\n\n1.  **Understand the Goal:** The user wants study material for an *easy* Python exam. It needs to include a course summary, a list of chapters with summaries, and a topic list for each chapter, all presented in JSON format.\n\n2.  **Define \"Easy\" Python:** What does \"easy\" mean in this context?\n    *   Focus on fundamental concepts.\n    *   Avoid complex topics like advanced OOP (metaclasses, descriptors), complex data structures (beyond lists/dicts/tuples/sets), decorators (maybe just mention them), generators (maybe just basic usage), asynchronous programming, complex libraries (like NumPy/Pandas unless explicitly mentioned, but probably not for \"easy\"), low-level details.\n    *   Target beginners or those needing a refresher on basics.\n    *   Topics should be core syntax, data types, control flow, functions, basic file I/O, and maybe introductory modules/classes.\n\n3.  **Structure the Output:** The user requested JSON format for the *topic lists* within chapters. The overall structure should be:\n    *   Course Title\n    *   Course Difficulty\n    *   Course Summary\n    *   List of Chapters:\n        *   For each chapter:\n            *   Chapter Number/ID\n            *   Chapter Title\n            *   Chapter Summary\n            *   Topics (as a JSON string or embedded JSON object)\n\n4.  **Draft the Course Summary:** Briefly describe what the course covers, emphasizing the focus on fundamentals for beginners. Mention core concepts like syntax, data types, control flow, functions, and maybe basic I/O.\n\n5.  **Outline Chapters:** Based on the \"easy\" definition, break down the core concepts into logical chapters. A standard beginner progression often looks like this:\n    *   Introduction (What is Python? Setup)\n    *   Basic Syntax and Variables\n    *   Data Types (Numbers, Strings, Booleans)\n    *   Basic Collections (Lists, Tuples)\n    *   More Collections (Dictionaries, Sets) - *Could merge with previous, but separating can be good for clarity.*\n    *   Control Flow (If/Else)\n    *   Loops (For/While)\n    *   Functions\n    *   Modules and Basic Input/Output (Maybe combine or keep separate)\n    *   (Optional but good for easy level) Basic Error Handling (Try/Except)\n    *   (Optional, borderline easy) Introduction to Object-Oriented Programming (Classes/Objects - very basic)\n\n    *Self-Correction:* Let's refine the chapters for simplicity and flow:\n    1.  Introduction to Python\n    2.  Variables and Basic Data Types\n    3.  Operators and Expressions\n    4.  Control Flow: Conditional Statements\n    5.  Control Flow: Loops\n    6.  Data Structures: Lists and Tuples\n    7.  Data Structures: Dictionaries and Sets\n    8.  Functions\n    9.  Modules and File I/O (Combine basic imports and file handling)\n    10. Basic Error Handling (Try/Except)\n\n6.  **Write Chapter Summaries:** For each chapter defined above, write a concise summary (1-2 sentences) explaining its main goal.\n\n7.  **Detail Topics for Each Chapter:** Now, list the specific concepts covered within each chapter. This is where the JSON format is required.\n    *   **Chapter 1 (Intro):** What is Python? Why use it? Installation (mention IDLE). Running code (interactive vs. script). Comments. Basic `print()`.\n    *   **Chapter 2 (Variables/Data Types):** Variable assignment. Naming rules. Integers (`int`), Floats (`float`), Strings (`str`), Booleans (`bool`). Type conversion (`int()`, `str()`, etc.). `type()` function.\n    *   **Chapter 3 (Operators):** Arithmetic (+, -, *, /, %, //, **). Comparison (==, !=, >, <, >=, <=). Logical (and, or, not). Assignment (=, +=, -=, etc.).\n    *   **Chapter 4 (Conditionals):** `if` statement. `else` statement. `elif` statement. Indentation importance. Nested `if`.\n    *   **Chapter 5 (Loops):** `for` loop (iterating over sequences like lists, strings, `range()`). `while` loop. `break` statement. `continue` statement.\n    *   **Chapter 6 (Lists/Tuples):** Defining lists (`[]`). Accessing elements (indexing, slicing). Modifying lists (append, insert, remove, pop). List methods (len, sort, reverse). Defining tuples (`()`). Immutability. Accessing tuple elements. When to use lists vs. tuples.\n    *   **Chapter 7 (Dicts/Sets):** Defining dictionaries (`{}`). Key-value pairs. Accessing values (by key). Adding/updating items. Dictionary methods (`keys()`, `values()`, `items()`, `get()`). Defining sets (`{}`). Uniqueness. Set operations (union, intersection - maybe too much for easy? Keep it simple: adding/removing elements, checking membership).\n    *   **Chapter 8 (Functions):** Defining functions (`def`). Parameters and arguments. `return` statement. Scope (local vs. global - basic idea). Default arguments. Docstrings.\n    *   **Chapter 9 (Modules/File I/O):** Importing modules (`import math`, `from math import sqrt`). Using imported functions/constants. Basic file opening (`open()`). Reading from files (`read()`, `readline()`, `readlines()`). Writing to files (`write()`). Closing files (`close()`). Using `with open(...)`.\n    *   **Chapter 10 (Error Handling):** Common errors (SyntaxError, NameError, TypeError, IndexError, KeyError). `try...except` block. Handling specific exceptions. `finally` (optional, maybe skip for truly easy).\n\n8.  **Format as JSON:** Now, take the topic lists for each chapter and format them correctly as JSON arrays of strings. Embed this JSON within the overall structure. Ensure correct quoting and syntax for the JSON part.\n\n9.  **Review and Refine:** Read through the entire generated material.\n    *   Is the difficulty truly \"Easy\"? (Yes, avoids complex topics).\n    *   Is the structure correct as requested? (Course summary, chapter list, chapter summaries, JSON topics).\n    *   Are the summaries clear and concise?\n    *   Are the topic lists comprehensive *for an easy level*?\n    *   Is the JSON valid? (Check syntax, quotes, commas).\n    *   Add a concluding remark or study tips.\n\n10. **Final Output Generation:** Assemble the pieces into the final response, ensuring the JSON parts are correctly formatted within the text or as a code block if appropriate for readability. Make sure the overall structure matches the user's request."},
            {text: "Okay, here is a study material outline for an easy-level Python exam, presented in the requested format.\n\n---\n\n## Python Fundamentals - Easy Level Exam Study Material\n\n**Course Difficulty:** Easy\n\n**Course Summary:**\nThis course provides a foundational understanding of the Python programming language, designed for beginners with little to no prior programming experience. It covers the essential building blocks, including basic syntax, data types, control flow structures (like conditional statements and loops), fundamental data structures (lists, dictionaries), functions, and basic file handling. The focus is on understanding core concepts and writing simple Python scripts. This material is ideal for preparing for an introductory-level exam or assessment.\n\n---\n\n**List of Chapters:**\n\n**1. Introduction to Python**\n    *   **Summary:** Introduces Python as a programming language, its key features (readability, versatility), how to set up a basic Python environment (like using IDLE or an online editor), and how to run your first simple programs. It also covers the concept of code comments.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"What is Python?\",\n          \"Why use Python (Advantages)?\",\n          \"Setting up Python (mentioning IDLE/Online Editors)\",\n          \"Running Python Code (Interactive Mode vs. Script Mode)\",\n          \"Basic Syntax Rules (Indentation)\",\n          \"Writing your first program (`print()` function)\",\n          \"Understanding Code Comments (#)\"\n        ]\n        ```\n\n**2. Variables and Basic Data Types**\n    *   **Summary:** Explains how to store data in Python using variables. Covers the fundamental data types: integers (whole numbers), floats (decimal numbers), strings (text), and booleans (True/False). It also touches upon how to check a variable's type and basic type conversion.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"What are Variables?\",\n          \"Assigning Values to Variables (=)\",\n          \"Variable Naming Conventions and Rules\",\n          \"Introduction to Data Types\",\n          \"Integers (`int`)\",\n          \"Floating-Point Numbers (`float`)\",\n          \"Strings (`str`) - Creating, Concatenating (+), Basic Indexing\",\n          \"Booleans (`bool`) - True and False\",\n          \"Using the `type()` function\",\n          \"Basic Type Conversion (`int()`, `float()`, `str()`)\"\n        ]\n        ```\n\n**3. Operators and Expressions**\n    *   **Summary:** Covers the different types of operators used in Python to perform operations on data. This includes arithmetic operators for math, comparison operators for comparing values, and logical operators for combining boolean conditions.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"What are Operators and Expressions?\",\n          \"Arithmetic Operators (+, -, *, /, %, //, **)\",\n          \"Comparison Operators (==, !=, >, <, >=, <=)\",\n          \"Logical Operators (`and`, `or`, `not`)\",\n          \"Assignment Operators (=, +=, -=, etc.)\",\n          \"Operator Precedence (Basic Understanding)\"\n        ]\n        ```\n\n**4. Control Flow: Conditional Statements**\n    *   **Summary:** Introduces conditional logic, allowing programs to make decisions and execute different code blocks based on whether certain conditions are true or false. Covers `if`, `elif` (else if), and `else` statements. The importance of indentation is re-emphasized here.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"Introduction to Control Flow\",\n          \"The `if` statement\",\n          \"The `else` statement\",\n          \"The `elif` statement\",\n          \"Indentation in Conditional Statements\",\n          \"Nested `if` statements (Simple examples)\"\n        ]\n        ```\n\n**5. Control Flow: Loops**\n    *   **Summary:** Explains how to repeat blocks of code using loops. Covers the two main types: `for` loops (for iterating over sequences like lists or strings) and `while` loops (for repeating as long as a condition is true). Also introduces basic loop control statements like `break` and `continue`.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"Introduction to Loops (Iteration)\",\n          \"The `for` loop\",\n          \"Using `range()` with `for` loops\",\n          \"Iterating over Strings and Lists\",\n          \"The `while` loop\",\n          \"The `break` statement (Exiting a loop)\",\n          \"The `continue` statement (Skipping an iteration)\",\n          \"Simple Loop Examples\"\n        ]\n        ```\n\n**6. Data Structures: Lists and Tuples**\n    *   **Summary:** Introduces two fundamental sequence data structures: Lists (mutable, ordered collections) and Tuples (immutable, ordered collections). Covers how to create them, access elements (indexing and slicing), and perform basic operations.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"Introduction to Data Structures\",\n          \"Lists: Creating (`[]`)\",\n          \"Accessing List Elements (Indexing `[ ]`)\",\n          \"List Slicing (`[:]`)\",\n          \"Modifying Lists (`append()`, `insert()`, assigning by index)\",\n          \"Removing List Elements (`remove()`, `pop()`)\",\n          \"Basic List Methods (`len()`)\",\n          \"Tuples: Creating (`()`)\",\n          \"Accessing Tuple Elements (Indexing, Slicing)\",\n          \"Immutability of Tuples\",\n          \"When to use Lists vs. Tuples (Briefly)\"\n        ]\n        ```\n\n**7. Data Structures: Dictionaries**\n    *   **Summary:** Introduces Dictionaries, which store data as key-value pairs. Covers how to create dictionaries, access values using keys, add new pairs, and modify existing ones. Briefly mentions common dictionary methods.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"Dictionaries: Creating (`{}`)\",\n          \"Key-Value Pairs\",\n          \"Accessing Values using Keys (`[]`)\",\n          \"Adding and Modifying Dictionary Entries\",\n          \"Checking if a Key Exists (`in` keyword)\",\n          \"Basic Dictionary Methods (`keys()`, `values()`, `items()`, `get()`)\"\n        ]\n        ```\n\n**8. Functions**\n    *   **Summary:** Explains how to define and use functions to organize code into reusable blocks. Covers defining functions (`def`), passing arguments (inputs), returning values (`return`), and the concept of function scope (local variables).\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"What are Functions?\",\n          \"Why use Functions (Reusability, Organization)?\",\n          \"Defining Functions (`def` keyword)\",\n          \"Function Parameters and Arguments\",\n          \"The `return` statement\",\n          \"Calling Functions\",\n          \"Scope (Local Variables within Functions)\",\n          \"Docstrings (Brief Mention)\"\n        ]\n        ```\n\n**9. Modules and Basic File I/O**\n    *   **Summary:** Introduces the concept of modules to reuse code written by others (or yourself). Covers basic importing of modules (like the `math` module). Also explains the fundamentals of reading from and writing to text files.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"What are Modules?\",\n          \"Importing Modules (`import module_name`)\",\n          \"Using Functions from Modules (`module_name.function_name()`)\",\n          \"Example: Using the `math` module (e.g., `math.sqrt()`)\",\n          \"Introduction to File Input/Output (I/O)\",\n          \"Opening Files (`open()` function - read 'r', write 'w')\",\n          \"Reading from Files (`read()`, `readline()`)\",\n          \"Writing to Files (`write()`)\",\n          \"Closing Files (`close()`)\",\n          \"Using `with open(...)` (Recommended practice)\"\n        ]\n        ```\n\n**10. Basic Error Handling**\n    *   **Summary:** Introduces common types of errors encountered while programming and explains how to handle potential errors gracefully using `try...except` blocks, preventing the program from crashing unexpectedly.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"Understanding Errors (Syntax vs. Runtime Errors)\",\n          \"Common Runtime Errors (e.g., `NameError`, `TypeError`, `IndexError`, `ValueError`)\",\n          \"Introduction to Exception Handling\",\n          \"The `try` block\",\n          \"The `except` block (Handling specific errors)\",\n          \"Simple `try...except` examples\"\n        ]\n        ```\n\n---\n\n**Study Tips for Easy Level Exam:**\n\n*   **Practice:** Write small code snippets for each topic. Don't just read; code!\n*   **Understand Concepts:** Focus on *why* things work, not just memorizing syntax.\n*   **Trace Code:** Manually step through simple code examples to understand the flow of execution.\n*   **Use the `print()` function:** Use `print()` liberally to check variable values and understand program flow during practice.\n*   **Review Errors:** When you get an error, read the message carefully. It often tells you what's wrong.\n*   **Keep it Simple:** Don't overcomplicate your solutions for an easy-level exam. Focus on clear, straightforward code.\n\nGood luck with your exam!"},
          ],
        },
      ],
    });
  
    /*const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // TODO: Following code needs to be updated for client-side apps.
    const candidates = result.response.candidates;
    for(let candidate_index = 0; candidate_index < candidates.length; candidate_index++) {
      for(let part_index = 0; part_index < candidates[candidate_index].content.parts.length; part_index++) {
        const part = candidates[candidate_index].content.parts[part_index];
        if(part.inlineData) {
          try {
            const filename = `output_${candidate_index}_${part_index}.${mime.extension(part.inlineData.mimeType)}`;
            fs.writeFileSync(filename, Buffer.from(part.inlineData.data, 'base64'));
            console.log(`Output written to: ${filename}`);
          } catch (err) {
            console.error(err);
          }
        }
      }
    }
    console.log(result.response.text());*/
