const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  const fs = require("node:fs");
  const mime = require("mime-types");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.5-pro-exp-03-25",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 65536,
    responseModalities: [
    ],
    responseMimeType: "application/json",
  };
  
    export const courseOutlineAIModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate a study material for Python for Exam and level of difficulty will be Easy with summary of course, List of Chapters along with summary for each chapter, Topic list in each chapter in JSON format"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "Here's a thinking process that could lead to the Python study material:\n\n1.  **Understand the Goal:** The user wants study material for an *easy* Python exam. It needs to include a course summary, a list of chapters with summaries, and a topic list for each chapter, all presented in JSON format.\n\n2.  **Define \"Easy\" Python:** What does \"easy\" mean in this context?\n    *   Focus on fundamental concepts.\n    *   Avoid complex topics like advanced OOP (metaclasses, descriptors), complex data structures (beyond lists/dicts/tuples/sets), decorators (maybe just mention them), generators (maybe just basic usage), asynchronous programming, complex libraries (like NumPy/Pandas unless explicitly mentioned, but probably not for \"easy\"), low-level details.\n    *   Target beginners or those needing a refresher on basics.\n    *   Topics should be core syntax, data types, control flow, functions, basic file I/O, and maybe introductory modules/classes.\n\n3.  **Structure the Output:** The user requested JSON format for the *topic lists* within chapters. The overall structure should be:\n    *   Course Title\n    *   Course Difficulty\n    *   Course Summary\n    *   List of Chapters:\n        *   For each chapter:\n            *   Chapter Number/ID\n            *   Chapter Title\n            *   Chapter Summary\n            *   Topics (as a JSON string or embedded JSON object)\n\n4.  **Draft the Course Summary:** Briefly describe what the course covers, emphasizing the focus on fundamentals for beginners. Mention core concepts like syntax, data types, control flow, functions, and maybe basic I/O.\n\n5.  **Outline Chapters:** Based on the \"easy\" definition, break down the core concepts into logical chapters. A standard beginner progression often looks like this:\n    *   Introduction (What is Python? Setup)\n    *   Basic Syntax and Variables\n    *   Data Types (Numbers, Strings, Booleans)\n    *   Basic Collections (Lists, Tuples)\n    *   More Collections (Dictionaries, Sets) - *Could merge with previous, but separating can be good for clarity.*\n    *   Control Flow (If/Else)\n    *   Loops (For/While)\n    *   Functions\n    *   Modules and Basic Input/Output (Maybe combine or keep separate)\n    *   (Optional but good for easy level) Basic Error Handling (Try/Except)\n    *   (Optional, borderline easy) Introduction to Object-Oriented Programming (Classes/Objects - very basic)\n\n    *Self-Correction:* Let's refine the chapters for simplicity and flow:\n    1.  Introduction to Python\n    2.  Variables and Basic Data Types\n    3.  Operators and Expressions\n    4.  Control Flow: Conditional Statements\n    5.  Control Flow: Loops\n    6.  Data Structures: Lists and Tuples\n    7.  Data Structures: Dictionaries and Sets\n    8.  Functions\n    9.  Modules and File I/O (Combine basic imports and file handling)\n    10. Basic Error Handling (Try/Except)\n\n6.  **Write Chapter Summaries:** For each chapter defined above, write a concise summary (1-2 sentences) explaining its main goal.\n\n7.  **Detail Topics for Each Chapter:** Now, list the specific concepts covered within each chapter. This is where the JSON format is required.\n    *   **Chapter 1 (Intro):** What is Python? Why use it? Installation (mention IDLE). Running code (interactive vs. script). Comments. Basic `print()`.\n    *   **Chapter 2 (Variables/Data Types):** Variable assignment. Naming rules. Integers (`int`), Floats (`float`), Strings (`str`), Booleans (`bool`). Type conversion (`int()`, `str()`, etc.). `type()` function.\n    *   **Chapter 3 (Operators):** Arithmetic (+, -, *, /, %, //, **). Comparison (==, !=, >, <, >=, <=). Logical (and, or, not). Assignment (=, +=, -=, etc.).\n    *   **Chapter 4 (Conditionals):** `if` statement. `else` statement. `elif` statement. Indentation importance. Nested `if`.\n    *   **Chapter 5 (Loops):** `for` loop (iterating over sequences like lists, strings, `range()`). `while` loop. `break` statement. `continue` statement.\n    *   **Chapter 6 (Lists/Tuples):** Defining lists (`[]`). Accessing elements (indexing, slicing). Modifying lists (append, insert, remove, pop). List methods (len, sort, reverse). Defining tuples (`()`). Immutability. Accessing tuple elements. When to use lists vs. tuples.\n    *   **Chapter 7 (Dicts/Sets):** Defining dictionaries (`{}`). Key-value pairs. Accessing values (by key). Adding/updating items. Dictionary methods (`keys()`, `values()`, `items()`, `get()`). Defining sets (`{}`). Uniqueness. Set operations (union, intersection - maybe too much for easy? Keep it simple: adding/removing elements, checking membership).\n    *   **Chapter 8 (Functions):** Defining functions (`def`). Parameters and arguments. `return` statement. Scope (local vs. global - basic idea). Default arguments. Docstrings.\n    *   **Chapter 9 (Modules/File I/O):** Importing modules (`import math`, `from math import sqrt`). Using imported functions/constants. Basic file opening (`open()`). Reading from files (`read()`, `readline()`, `readlines()`). Writing to files (`write()`). Closing files (`close()`). Using `with open(...)`.\n    *   **Chapter 10 (Error Handling):** Common errors (SyntaxError, NameError, TypeError, IndexError, KeyError). `try...except` block. Handling specific exceptions. `finally` (optional, maybe skip for truly easy).\n\n8.  **Format as JSON:** Now, take the topic lists for each chapter and format them correctly as JSON arrays of strings. Embed this JSON within the overall structure. Ensure correct quoting and syntax for the JSON part.\n\n9.  **Review and Refine:** Read through the entire generated material.\n    *   Is the difficulty truly \"Easy\"? (Yes, avoids complex topics).\n    *   Is the structure correct as requested? (Course summary, chapter list, chapter summaries, JSON topics).\n    *   Are the summaries clear and concise?\n    *   Are the topic lists comprehensive *for an easy level*?\n    *   Is the JSON valid? (Check syntax, quotes, commas).\n    *   Add a concluding remark or study tips.\n\n10. **Final Output Generation:** Assemble the pieces into the final response, ensuring the JSON parts are correctly formatted within the text or as a code block if appropriate for readability. Make sure the overall structure matches the user's request."},
            {text: "Okay, here is a study material outline for an easy-level Python exam, presented in the requested format.\n\n---\n\n## Python Fundamentals - Easy Level Exam Study Material\n\n**Course Difficulty:** Easy\n\n**Course Summary:**\nThis course provides a foundational understanding of the Python programming language, designed for beginners with little to no prior programming experience. It covers the essential building blocks, including basic syntax, data types, control flow structures (like conditional statements and loops), fundamental data structures (lists, dictionaries), functions, and basic file handling. The focus is on understanding core concepts and writing simple Python scripts. This material is ideal for preparing for an introductory-level exam or assessment.\n\n---\n\n**List of Chapters:**\n\n**1. Introduction to Python**\n    *   **Summary:** Introduces Python as a programming language, its key features (readability, versatility), how to set up a basic Python environment (like using IDLE or an online editor), and how to run your first simple programs. It also covers the concept of code comments.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"What is Python?\",\n          \"Why use Python (Advantages)?\",\n          \"Setting up Python (mentioning IDLE/Online Editors)\",\n          \"Running Python Code (Interactive Mode vs. Script Mode)\",\n          \"Basic Syntax Rules (Indentation)\",\n          \"Writing your first program (`print()` function)\",\n          \"Understanding Code Comments (#)\"\n        ]\n        ```\n\n**2. Variables and Basic Data Types**\n    *   **Summary:** Explains how to store data in Python using variables. Covers the fundamental data types: integers (whole numbers), floats (decimal numbers), strings (text), and booleans (True/False). It also touches upon how to check a variable's type and basic type conversion.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"What are Variables?\",\n          \"Assigning Values to Variables (=)\",\n          \"Variable Naming Conventions and Rules\",\n          \"Introduction to Data Types\",\n          \"Integers (`int`)\",\n          \"Floating-Point Numbers (`float`)\",\n          \"Strings (`str`) - Creating, Concatenating (+), Basic Indexing\",\n          \"Booleans (`bool`) - True and False\",\n          \"Using the `type()` function\",\n          \"Basic Type Conversion (`int()`, `float()`, `str()`)\"\n        ]\n        ```\n\n**3. Operators and Expressions**\n    *   **Summary:** Covers the different types of operators used in Python to perform operations on data. This includes arithmetic operators for math, comparison operators for comparing values, and logical operators for combining boolean conditions.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"What are Operators and Expressions?\",\n          \"Arithmetic Operators (+, -, *, /, %, //, **)\",\n          \"Comparison Operators (==, !=, >, <, >=, <=)\",\n          \"Logical Operators (`and`, `or`, `not`)\",\n          \"Assignment Operators (=, +=, -=, etc.)\",\n          \"Operator Precedence (Basic Understanding)\"\n        ]\n        ```\n\n**4. Control Flow: Conditional Statements**\n    *   **Summary:** Introduces conditional logic, allowing programs to make decisions and execute different code blocks based on whether certain conditions are true or false. Covers `if`, `elif` (else if), and `else` statements. The importance of indentation is re-emphasized here.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"Introduction to Control Flow\",\n          \"The `if` statement\",\n          \"The `else` statement\",\n          \"The `elif` statement\",\n          \"Indentation in Conditional Statements\",\n          \"Nested `if` statements (Simple examples)\"\n        ]\n        ```\n\n**5. Control Flow: Loops**\n    *   **Summary:** Explains how to repeat blocks of code using loops. Covers the two main types: `for` loops (for iterating over sequences like lists or strings) and `while` loops (for repeating as long as a condition is true). Also introduces basic loop control statements like `break` and `continue`.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"Introduction to Loops (Iteration)\",\n          \"The `for` loop\",\n          \"Using `range()` with `for` loops\",\n          \"Iterating over Strings and Lists\",\n          \"The `while` loop\",\n          \"The `break` statement (Exiting a loop)\",\n          \"The `continue` statement (Skipping an iteration)\",\n          \"Simple Loop Examples\"\n        ]\n        ```\n\n**6. Data Structures: Lists and Tuples**\n    *   **Summary:** Introduces two fundamental sequence data structures: Lists (mutable, ordered collections) and Tuples (immutable, ordered collections). Covers how to create them, access elements (indexing and slicing), and perform basic operations.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"Introduction to Data Structures\",\n          \"Lists: Creating (`[]`)\",\n          \"Accessing List Elements (Indexing `[ ]`)\",\n          \"List Slicing (`[:]`)\",\n          \"Modifying Lists (`append()`, `insert()`, assigning by index)\",\n          \"Removing List Elements (`remove()`, `pop()`)\",\n          \"Basic List Methods (`len()`)\",\n          \"Tuples: Creating (`()`)\",\n          \"Accessing Tuple Elements (Indexing, Slicing)\",\n          \"Immutability of Tuples\",\n          \"When to use Lists vs. Tuples (Briefly)\"\n        ]\n        ```\n\n**7. Data Structures: Dictionaries**\n    *   **Summary:** Introduces Dictionaries, which store data as key-value pairs. Covers how to create dictionaries, access values using keys, add new pairs, and modify existing ones. Briefly mentions common dictionary methods.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"Dictionaries: Creating (`{}`)\",\n          \"Key-Value Pairs\",\n          \"Accessing Values using Keys (`[]`)\",\n          \"Adding and Modifying Dictionary Entries\",\n          \"Checking if a Key Exists (`in` keyword)\",\n          \"Basic Dictionary Methods (`keys()`, `values()`, `items()`, `get()`)\"\n        ]\n        ```\n\n**8. Functions**\n    *   **Summary:** Explains how to define and use functions to organize code into reusable blocks. Covers defining functions (`def`), passing arguments (inputs), returning values (`return`), and the concept of function scope (local variables).\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"What are Functions?\",\n          \"Why use Functions (Reusability, Organization)?\",\n          \"Defining Functions (`def` keyword)\",\n          \"Function Parameters and Arguments\",\n          \"The `return` statement\",\n          \"Calling Functions\",\n          \"Scope (Local Variables within Functions)\",\n          \"Docstrings (Brief Mention)\"\n        ]\n        ```\n\n**9. Modules and Basic File I/O**\n    *   **Summary:** Introduces the concept of modules to reuse code written by others (or yourself). Covers basic importing of modules (like the `math` module). Also explains the fundamentals of reading from and writing to text files.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"What are Modules?\",\n          \"Importing Modules (`import module_name`)\",\n          \"Using Functions from Modules (`module_name.function_name()`)\",\n          \"Example: Using the `math` module (e.g., `math.sqrt()`)\",\n          \"Introduction to File Input/Output (I/O)\",\n          \"Opening Files (`open()` function - read 'r', write 'w')\",\n          \"Reading from Files (`read()`, `readline()`)\",\n          \"Writing to Files (`write()`)\",\n          \"Closing Files (`close()`)\",\n          \"Using `with open(...)` (Recommended practice)\"\n        ]\n        ```\n\n**10. Basic Error Handling**\n    *   **Summary:** Introduces common types of errors encountered while programming and explains how to handle potential errors gracefully using `try...except` blocks, preventing the program from crashing unexpectedly.\n    *   **Topics (JSON):**\n        ```json\n        [\n          \"Understanding Errors (Syntax vs. Runtime Errors)\",\n          \"Common Runtime Errors (e.g., `NameError`, `TypeError`, `IndexError`, `ValueError`)\",\n          \"Introduction to Exception Handling\",\n          \"The `try` block\",\n          \"The `except` block (Handling specific errors)\",\n          \"Simple `try...except` examples\"\n        ]\n        ```\n\n---\n\n**Study Tips for Easy Level Exam:**\n\n*   **Practice:** Write small code snippets for each topic. Don't just read; code!\n*   **Understand Concepts:** Focus on *why* things work, not just memorizing syntax.\n*   **Trace Code:** Manually step through simple code examples to understand the flow of execution.\n*   **Use the `print()` function:** Use `print()` liberally to check variable values and understand program flow during practice.\n*   **Review Errors:** When you get an error, read the message carefully. It often tells you what's wrong.\n*   **Keep it Simple:** Don't overcomplicate your solutions for an easy-level exam. Focus on clear, straightforward code.\n\nGood luck with your exam!"},
          ],
        },
      ],
    });
  
    /*const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // TODO: Following code needs to be updated for client-side apps.
    const candidates = result.response.candidates;
    for(let candidate_index = 0; candidate_index < candidates.length; candidate_index++) {
      for(let part_index = 0; part_index < candidates[candidate_index].content.parts.length; part_index++) {
        const part = candidates[candidate_index].content.parts[part_index];
        if(part.inlineData) {
          try {
            const filename = `output_${candidate_index}_${part_index}.${mime.extension(part.inlineData.mimeType)}`;
            fs.writeFileSync(filename, Buffer.from(part.inlineData.data, 'base64'));
            console.log(`Output written to: ${filename}`);
          } catch (err) {
            console.error(err);
          }
        }
      }
    }
    console.log(result.response.text());*/

    export const generateNotesAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate exam material for each chapter, Make sure to include all topic points in the content,make sure to give content in html format(do no add HTMLKL, Head,Body, Title tag),The chapters:{\n      \"chapterNumber\": 1,\n      \"chapterTitle\": \"Core Python Concepts & Gotchas\",\n      \"chapterSummary\": \"Revisits fundamental Python concepts with a focus on nuances often probed in interviews, such as mutability differences, variable scope rules (LEGB), and potentially confusing behaviors or common pitfalls.\",\n      \"topics\": [\n        \"Mutability: Distinguishing mutable (list, dict, set) vs. immutable (tuple, str, int, float) types\",\n        \"Variable Scope: LEGB rule (Local, Enclosing function locals, Global, Built-in)\",\n        \"Understanding `global` and `nonlocal` keywords\",\n        \"Function Arguments: Pass-by-object-reference (effects of modifying mutable arguments)\",\n        \"Shallow vs. Deep Copy (`copy` module)\",\n        \"Identity (`is`, `id()`) vs. Equality (`==`)\",\n        \"Common Built-in Functions (`map`, `filter`, `zip`, `enumerate`, `sorted`, `any`, `all`)\",\n        \"Python's Truthiness concept (what evaluates to False)\"\n      ]\n    },\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "The user wants exam material for Chapter 1: \"Core Python Concepts & Gotchas\".\nThe material should be in HTML format, excluding the `<html>`, `<head>`, `<body>`, and `<title>` tags.\nIt needs to cover all the specified topics:\n1.  **Mutability:** Mutable vs. Immutable types.\n2.  **Variable Scope:** LEGB rule.\n3.  **`global` and `nonlocal` Keywords:** Understanding their usage.\n4.  **Function Arguments:** Pass-by-object-reference and mutable arguments.\n5.  **Shallow vs. Deep Copy:** Using the `copy` module.\n6.  **Identity vs. Equality:** `is` vs. `==` and `id()`.\n7.  **Common Built-in Functions:** `map`, `filter`, `zip`, `enumerate`, `sorted`, `any`, `all`.\n8.  **Python's Truthiness:** What evaluates to `False`.\n\nI will structure the exam material with different types of questions:\n*   Multiple Choice Questions (MCQs)\n*   True/False Questions\n*   Short Answer/Code Explanation Questions\n*   Code Snippet Prediction Questions\n\nI need to ensure each topic is represented in the questions.\n\n**Plan:**\n1.  Create a main `div` container for the chapter exam.\n2.  Add a heading for the chapter.\n3.  For each topic, create relevant questions (MCQ, True/False, Short Answer, Code Prediction).\n4.  Format the questions and options using HTML lists (`ol`, `ul`), paragraphs (`p`), code blocks (`pre`, `code`), and bold/italic tags where appropriate.\n5.  Include an answer key section at the end.\n6.  Double-check that all topics are covered and the output is valid HTML fragment.\n\n**Topic Coverage Check:**\n*   Mutability: MCQs on identifying mutable/immutable types, code prediction involving modification.\n*   Variable Scope (LEGB): MCQs on LEGB order, code prediction involving nested functions and variable access.\n*   `global`/`nonlocal`: Code prediction/explanation using these keywords.\n*   Function Arguments (Pass-by-object-reference): Code prediction showing side effects with mutable arguments.\n*   Shallow vs. Deep Copy: MCQs/Code prediction differentiating the two copy types.\n*   Identity vs. Equality: MCQs/Code prediction using `is` and `==`.\n*   Built-in Functions: MCQs/Code prediction using `map`, `filter`, `zip`, etc.\n*   Truthiness: MCQs identifying falsy values.\n\nOkay, planning complete. I will now generate the HTML content."},
            {text: "```html\n<div>\n    <h2>Chapter 1: Core Python Concepts & Gotchas - Exam</h2>\n    <p>This exam covers fundamental Python concepts, focusing on common nuances and potential pitfalls often encountered in technical interviews and development.</p>\n    <hr>\n\n    <h3>Part 1: Multiple Choice Questions (MCQ)</h3>\n    <ol>\n        <li>\n            <p>Which of the following data types in Python is <strong>immutable</strong>?</p>\n            <ul>\n                <li>(a) list</li>\n                <li>(b) dict</li>\n                <li>(c) set</li>\n                <li>(d) tuple</li>\n            </ul>\n        </li>\n        <li>\n            <p>Consider the LEGB rule for variable scope resolution. What does 'E' stand for?</p>\n            <ul>\n                <li>(a) External</li>\n                <li>(b) Enclosing function locals</li>\n                <li>(c) Environment</li>\n                <li>(d) Executable</li>\n            </ul>\n        </li>\n        <li>\n            <p>What is the primary purpose of the <code>nonlocal</code> keyword in Python?</p>\n            <ul>\n                <li>(a) To declare a variable in the global scope.</li>\n                <li>(b) To modify a variable in the nearest enclosing scope (that isn't the global scope).</li>\n                <li>(c) To create a variable that cannot be modified.</li>\n                <li>(d) To access built-in functions.</li>\n            </ul>\n        </li>\n        <li>\n            <p>What will be the output of the following code?</p>\n            <pre><code>\ndef modify_list(lst):\n  lst.append(4)\n\nmy_list = [1, 2, 3]\nmodify_list(my_list)\nprint(my_list)\n            </code></pre>\n            <ul>\n                <li>(a) [1, 2, 3]</li>\n                <li>(b) [1, 2, 3, 4]</li>\n                <li>(c) [4]</li>\n                <li>(d) None</li>\n            </ul>\n            <p><em>Topic: Function Arguments (Pass-by-object-reference) & Mutability</em></p>\n        </li>\n        <li>\n            <p>If <code>a = [1, 2, [3, 4]]</code> and <code>b = a.copy()</code>, what happens when you execute <code>b[2][0] = 99</code>?</p>\n            <ul>\n                <li>(a) Only <code>b</code> becomes <code>[1, 2, [99, 4]]</code>.</li>\n                <li>(b) Both <code>a</code> and <code>b</code> become <code>[1, 2, [99, 4]]</code>.</li>\n                <li>(c) Only <code>a</code> becomes <code>[1, 2, [99, 4]]</code>.</li>\n                <li>(d) An error occurs.</li>\n            </ul>\n            <p><em>Topic: Shallow vs. Deep Copy</em></p>\n        </li>\n        <li>\n            <p>What is the difference between <code>is</code> and <code>==</code> in Python?</p>\n            <ul>\n                <li>(a) They are identical.</li>\n                <li>(b) <code>is</code> checks for object identity (same memory location), while <code>==</code> checks for value equality.</li>\n                <li>(c) <code>==</code> checks for object identity, while <code>is</code> checks for value equality.</li>\n                <li>(d) <code>is</code> is used for integers, <code>==</code> is used for strings.</li>\n            </ul>\n            <p><em>Topic: Identity vs. Equality</em></p>\n        </li>\n         <li>\n            <p>Which built-in function would you use to apply a function to every item in an iterable and return an iterator of the results?</p>\n            <ul>\n                <li>(a) filter()</li>\n                <li>(b) enumerate()</li>\n                <li>(c) map()</li>\n                <li>(d) zip()</li>\n            </ul>\n            <p><em>Topic: Common Built-in Functions</em></p>\n        </li>\n        <li>\n            <p>Which of the following values evaluates to <code>False</code> in a boolean context in Python?</p>\n            <ul>\n                <li>(a) \" \" (a string with a space)</li>\n                <li>(b) [ ] (an empty list)</li>\n                <li>(c) { 'a': 1 } (a non-empty dictionary)</li>\n                <li>(d) 1 (the integer one)</li>\n            </ul>\n            <p><em>Topic: Python's Truthiness</em></p>\n        </li>\n         <li>\n            <p>What does the <code>zip()</code> function do when given two lists of different lengths?</p>\n            <ul>\n                <li>(a) Raises a ValueError.</li>\n                <li>(b) Pads the shorter list with <code>None</code>.</li>\n                <li>(c) Stops creating pairs when the shorter list runs out of items.</li>\n                <li>(d) Repeats the last item of the shorter list.</li>\n            </ul>\n            <p><em>Topic: Common Built-in Functions</em></p>\n        </li>\n         <li>\n            <p>Using `copy.deepcopy()` on `a = [1, 2, [3, 4]]` to create `c`, what happens when you execute `c[2][0] = 99`?</p>\n            <ul>\n                <li>(a) Only `c` becomes `[1, 2, [99, 4]]`.</li>\n                <li>(b) Both `a` and `c` become `[1, 2, [99, 4]]`.</li>\n                <li>(c) Only `a` becomes `[1, 2, [99, 4]]`.</li>\n                <li>(d) An error occurs.</li>\n            </ul>\n            <p><em>Topic: Shallow vs. Deep Copy</em></p>\n        </li>\n    </ol>\n\n    <hr>\n\n    <h3>Part 2: True/False Questions</h3>\n    <ol>\n        <li>Strings in Python are mutable, meaning their content can be changed after creation. (True/False) <br><em>Topic: Mutability</em></li>\n        <li>If a variable name is not found in the Local scope, Python next searches the Global scope according to the LEGB rule. (True/False) <br><em>Topic: Variable Scope</em></li>\n        <li>The <code>global</code> keyword allows a function to create a new variable in the global scope even if one doesn't exist. (True/False) <br><em>Topic: Understanding `global` keyword</em></li>\n        <li>When passing an immutable object (like a string or number) to a function, modifications made to the parameter inside the function will affect the original object outside the function. (True/False) <br><em>Topic: Function Arguments & Mutability</em></li>\n        <li><code>id(a) == id(b)</code> implies that <code>a is b</code> will evaluate to True. (True/False) <br><em>Topic: Identity vs. Equality</em></li>\n        <li>The <code>filter()</code> function returns an iterator yielding items from the original iterable for which the provided function returns True. (True/False) <br><em>Topic: Common Built-in Functions</em></li>\n        <li>An empty set <code>set()</code> evaluates to True in Python's truthiness concept. (True/False) <br><em>Topic: Python's Truthiness</em></li>\n        <li>A shallow copy creates a new object, but inserts references into it to the objects found in the original. (True/False) <br><em>Topic: Shallow vs. Deep Copy</em></li>\n    </ol>\n\n    <hr>\n\n    <h3>Part 3: Short Answer & Code Explanation</h3>\n    <ol>\n        <li>\n            <p>Explain the difference between mutable and immutable objects in Python. Provide one example of each.</p>\n            <p><em>Topic: Mutability</em></p>\n        </li>\n        <li>\n            <p>Describe the order in which Python searches for a variable name according to the LEGB rule.</p>\n            <p><em>Topic: Variable Scope</em></p>\n        </li>\n        <li>\n            <p>Explain Python's pass-by-object-reference mechanism for function arguments. How does this affect mutable arguments differently than immutable ones?</p>\n            <p><em>Topic: Function Arguments</em></p>\n        </li>\n        <li>\n            <p>Consider the code below. Explain why <code>x</code> inside the function refers to the global <code>x</code> and what the output will be.</p>\n            <pre><code>\nx = 10\ndef my_func():\n  print(x) # Accessing x\nmy_func()\n            </code></pre>\n             <p><em>Topic: Variable Scope (LEGB)</em></p>\n        </li>\n         <li>\n            <p>What is the difference in behavior between a shallow copy and a deep copy when copying a list that contains other mutable objects (e.g., nested lists)?</p>\n            <p><em>Topic: Shallow vs. Deep Copy</em></p>\n        </li>\n    </ol>\n\n    <hr>\n\n    <h3>Part 4: Code Snippet Prediction</h3>\n    <ol>\n        <li>\n            <p>What will be the output of the following code snippet?</p>\n            <pre><code>\na = [10, 20]\nb = a\nb.append(30)\nprint(a)\nprint(a is b)\n            </code></pre>\n            <p><em>Topics: Mutability, Identity vs. Equality</em></p>\n        </li>\n        <li>\n            <p>What will be printed by the following code?</p>\n            <pre><code>\nx = 5\ndef outer():\n  x = 10\n  def inner():\n    nonlocal x\n    x = 15\n    print(\"Inner:\", x)\n  inner()\n  print(\"Outer:\", x)\n\nouter()\nprint(\"Global:\", x)\n            </code></pre>\n            <p><em>Topics: Variable Scope, `nonlocal` keyword</em></p>\n        </li>\n        <li>\n            <p>What is the output of this code?</p>\n            <pre><code>\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3]\nlist3 = list1\n\nprint(list1 == list2)\nprint(list1 is list2)\nprint(list1 is list3)\n            </code></pre>\n            <p><em>Topic: Identity vs. Equality</em></p>\n        </li>\n        <li>\n            <p>Predict the output:</p>\n            <pre><code>\nimport copy\n\noriginal = [[1, 2], [3, 4]]\nshallow = copy.copy(original)\ndeep = copy.deepcopy(original)\n\noriginal.append([5, 6])\noriginal[0][0] = 99\n\nprint(\"Original:\", original)\nprint(\"Shallow Copy:\", shallow)\nprint(\"Deep Copy:\", deep)\n            </code></pre>\n            <p><em>Topic: Shallow vs. Deep Copy</em></p>\n        </li>\n        <li>\n            <p>What will the following code print?</p>\n            <pre><code>\nnumbers = [1, 2, 3, 4, 5]\nresult = list(filter(lambda x: x % 2 == 0, map(lambda x: x * 2, numbers)))\nprint(result)\n            </code></pre>\n            <p><em>Topic: Common Built-in Functions (`map`, `filter`)</em></p>\n        </li>\n        <li>\n            <p>What is the output of this code using `zip` and `enumerate`?</p>\n            <pre><code>\nkeys = ['a', 'b', 'c']\nvalues = [1, 2]\nzipped = list(zip(keys, values))\nenumerated_zip = list(enumerate(zipped))\n\nprint(enumerated_zip)\n            </code></pre>\n            <p><em>Topic: Common Built-in Functions (`zip`, `enumerate`)</em></p>\n        </li>\n         <li>\n            <p>What will be the output of the following code?</p>\n            <pre><code>\ndef check_truthiness(val):\n    if val:\n        print(f\"{repr(val)} is Truthy\")\n    else:\n        print(f\"{repr(val)} is Falsy\")\n\ncheck_truthiness(0)\ncheck_truthiness(\"\")\ncheck_truthiness(None)\ncheck_truthiness([])\ncheck_truthiness({})\ncheck_truthiness(set())\ncheck_truthiness(1)\ncheck_truthiness(\"hello\")\n            </code></pre>\n            <p><em>Topic: Python's Truthiness</em></p>\n         </li>\n         <li>\n            <p>Predict the output:</p>\n            <pre><code>\ncount = 0\ndef increment():\n    global count\n    count += 1\n\nincrement()\nincrement()\nprint(count)\n            </code></pre>\n            <p><em>Topic: `global` keyword</em></p>\n         </li>\n    </ol>\n\n    <hr>\n\n    <h2>Answer Key</h2>\n\n    <h3>Part 1: MCQ</h3>\n    <ol>\n        <li>(d) tuple</li>\n        <li>(b) Enclosing function locals</li>\n        <li>(b) To modify a variable in the nearest enclosing scope (that isn't the global scope).</li>\n        <li>(b) [1, 2, 3, 4]</li>\n        <li>(b) Both <code>a</code> and <code>b</code> become <code>[1, 2, [99, 4]]</code>. (Shallow copy copies references to nested objects)</li>\n        <li>(b) <code>is</code> checks for object identity (same memory location), while <code>==</code> checks for value equality.</li>\n        <li>(c) map()</li>\n        <li>(b) [ ] (an empty list)</li>\n        <li>(c) Stops creating pairs when the shorter list runs out of items.</li>\n        <li>(a) Only `c` becomes `[1, 2, [99, 4]]`. (Deep copy recursively copies nested objects)</li>\n    </ol>\n\n    <h3>Part 2: True/False</h3>\n    <ol>\n        <li>False (Strings are immutable)</li>\n        <li>False (Searches Enclosing function locals before Global)</li>\n        <li>True</li>\n        <li>False (Modifications inside the function create a new binding for the parameter, not affecting the original immutable object)</li>\n        <li>True</li>\n        <li>True</li>\n        <li>False (Empty containers are Falsy)</li>\n        <li>True</li>\n    </ol>\n\n    <h3>Part 3: Short Answer & Code Explanation</h3>\n    <ol>\n        <li><strong>Mutable vs. Immutable:</strong> Mutable objects can be changed in place after creation (e.g., list, dict, set). Immutable objects cannot be changed after creation; any operation that seems to modify them actually creates a new object (e.g., tuple, str, int, float). Example: Mutable - `my_list = [1]; my_list.append(2)` changes `my_list` to `[1, 2]`. Immutable - `my_string = \"hi\"; my_string += \"!\"` creates a new string `\"hi!\"`.</li>\n        <li><strong>LEGB Rule Order:</strong> 1. Local (L): Inside the current function. 2. Enclosing function locals (E): Scopes of any enclosing functions, from nearest to furthest. 3. Global (G): Top-level module scope. 4. Built-in (B): Predefined names in Python (like `len`, `print`).</li>\n        <li><strong>Pass-by-object-reference:</strong> Python passes references to objects into functions. If the object is mutable (like a list), modifying it via the reference inside the function changes the original object. If the object is immutable (like a number or string), operations that seem to modify it actually create a new object and rebind the local function variable to this new object, leaving the original object unchanged outside the function.</li>\n        <li><strong>Global Scope Access:</strong> The function `my_func` does not define its own local variable `x`. According to LEGB, Python looks in the enclosing scopes. Finding no enclosing function scope, it looks in the Global scope, finds `x = 10`, and prints it. Output: `10`.</li>\n        <li><strong>Shallow vs. Deep Copy:</strong> A shallow copy (`copy.copy()`) creates a new container object but populates it with references to the elements found in the original. If the original contains mutable objects (like nested lists), both the original and the shallow copy will contain references pointing to the *same* nested objects. Modifying a nested object through one copy will affect the other. A deep copy (`copy.deepcopy()`) creates a new container object and recursively creates *new copies* of all objects found within the original, including nested mutable objects. Modifications to nested objects in one copy do *not* affect the other.</li>\n    </ol>\n\n    <h3>Part 4: Code Snippet Prediction</h3>\n    <ol>\n        <li>\n            <pre>\n[10, 20, 30]\nTrue\n            </pre>\n            (<code>b</code> is just another reference to the same list object as <code>a</code>).\n        </li>\n        <li>\n            <pre>\nInner: 15\nOuter: 15\nGlobal: 5\n            </pre>\n            (<code>nonlocal x</code> modifies the <code>x</code> in the `outer` scope, not the global one).\n        </li>\n        <li>\n            <pre>\nTrue\nFalse\nTrue\n            </pre>\n            (<code>list1</code> and <code>list2</code> have equal values but are different objects. <code>list3</code> is a reference to the same object as <code>list1</code>).\n        </li>\n        <li>\n            <pre>\nOriginal: [[99, 2], [3, 4], [5, 6]]\nShallow Copy: [[99, 2], [3, 4]]\nDeep Copy: [[1, 2], [3, 4]]\n            </pre>\n            (Appending to `original` doesn't affect copies. Modifying a nested list element (`original[0][0] = 99`) affects `original` and `shallow` (which references the same nested list), but not `deep`).\n        </li>\n         <li>\n            <pre>\n[4, 8]\n            </pre>\n            (<code>map</code> creates `[2, 4, 6, 8, 10]`, `filter` keeps even numbers: `[4, 8]`).\n        </li>\n          <li>\n            <pre>\n[(0, ('a', 1)), (1, ('b', 2))]\n            </pre>\n            (<code>zip</code> stops at the shortest iterable length: `[('a', 1), ('b', 2)]`. `enumerate` adds indices).\n        </li>\n        <li>\n            <pre>\n0 is Falsy\n'' is Falsy\nNone is Falsy\n[] is Falsy\n{} is Falsy\nset() is Falsy\n1 is Truthy\n'hello' is Truthy\n            </pre>\n        </li>\n         <li>\n            <pre>\n2\n            </pre>\n            (The `global` keyword ensures the `increment` function modifies the global `count` variable).\n        </li>\n    </ol>\n</div>\n```"},
          ],
        },
      ],
    });

    export const GenerateStudyTypeContentAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate the Flashcard on topic:Flutter Fundamentals, user interface(ui) development,Basic App navigation in JSON format with front back content, Maximum 15\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "Here's my thought process for generating the Flutter Fundamentals flashcards in JSON format:\n\n1.  **Deconstruct the Request:**\n    *   **Topic:** Flutter Fundamentals, UI Development, Basic App Navigation. This is the core subject matter.\n    *   **Format:** JSON. The output must be a valid JSON structure.\n    *   **Content:** Flashcards with \"front\" and \"back\" content. Each object in the JSON array should represent a flashcard.\n    *   **Constraint:** Maximum 15 flashcards.\n\n2.  **Identify Key Concepts within the Topics:**\n    *   **Flutter Fundamentals:**\n        *   What *is* Flutter? (SDK, UI toolkit)\n        *   Core programming language? (Dart)\n        *   Key concept: Widgets (Everything is a widget)\n        *   Types of Widgets (Stateless, Stateful)\n        *   Hot Reload/Hot Restart\n        *   `main()` function and `runApp()`\n    *   **UI Development:**\n        *   Basic layout widgets (`Row`, `Column`, `Container`, `Center`, `Padding`, `Scaffold`)\n        *   Common UI elements (`Text`, `Image`, `Icon`, `Button` variants like `ElevatedButton`, `TextButton`)\n        *   `MaterialApp` / `CupertinoApp` (root widgets for themes/navigation)\n        *   Styling (Themes, `TextStyle`, `BoxDecoration`)\n        *   State management (basic concept, link to StatefulWidgets)\n    *   **Basic App Navigation:**\n        *   `Navigator` widget\n        *   `MaterialPageRoute` / `CupertinoPageRoute`\n        *   `Navigator.push()` (going to a new screen)\n        *   `Navigator.pop()` (going back)\n        *   Passing data between screens (constructor arguments)\n        *   Named Routes (optional, but good basic concept)\n\n3.  **Filter and Prioritize for 15 Flashcards:**\n    *   I have more concepts than 15. I need to select the *most fundamental* ones that cover the requested areas.\n    *   **Must-haves:**\n        *   What is Flutter?\n        *   What is Dart?\n        *   Everything is a Widget\n        *   Stateless vs. Stateful\n        *   `main()` and `runApp()`\n        *   `Scaffold` (basic app structure)\n        *   `Column` / `Row` (basic layout)\n        *   `Container` (basic styling/layout block)\n        *   `Text` (basic display)\n        *   `ElevatedButton` (basic interaction)\n        *   `MaterialApp` (root widget)\n        *   `Navigator.push()`\n        *   `Navigator.pop()`\n        *   `MaterialPageRoute`\n    *   **Good additions (if space):**\n        *   Hot Reload\n        *   `Center` / `Padding`\n        *   Passing data (maybe combine with `push`?)\n        *   `Icon` / `Image`\n\n4.  **Draft Flashcard Content (Front/Back):**\n    *   **Card 1:**\n        *   Front: What is Flutter?\n        *   Back: An open-source UI software development kit (SDK) created by Google for building natively compiled applications for mobile, web, and desktop from a single codebase.\n    *   **Card 2:**\n        *   Front: What programming language does Flutter use?\n        *   Back: Dart.\n    *   **Card 3:**\n        *   Front: What is the core principle of Flutter UI development?\n        *   Back: \"Everything is a Widget\". UI is built by composing various widgets.\n    *   **Card 4:**\n        *   Front: What is a `StatelessWidget`?\n        *   Back: A widget whose state cannot change after it's built. Used for static content. Rebuilt only when parent changes.\n    *   **Card 5:**\n        *   Front: What is a `StatefulWidget`?\n        *   Back: A widget that can change its state dynamically during runtime, often due to user interaction or data changes. Uses a separate `State` object.\n    *   **Card 6:**\n        *   Front: What is the entry point of a Flutter application?\n        *   Back: The `main()` function, which typically calls `runApp()` with the root widget.\n    *   **Card 7:**\n        *   Front: What is the purpose of the `Scaffold` widget?\n        *   Back: Provides a basic Material Design visual layout structure, including AppBar, Body, FloatingActionButton, Drawer, etc.\n    *   **Card 8:**\n        *   Front: How do you arrange widgets vertically?\n        *   Back: Using the `Column` widget.\n    *   **Card 9:**\n        *   Front: How do you arrange widgets horizontally?\n        *   Back: Using the `Row` widget.\n    *   **Card 10:**\n        *   Front: What is a `Container` widget used for?\n        *   Back: A versatile widget for styling (color, shape, border), sizing, padding, and margins of its child.\n    *   **Card 11:**\n        *   Front: How do you display text in Flutter?\n        *   Back: Using the `Text` widget.\n    *   **Card 12:**\n        *   Front: What is the purpose of `MaterialApp`?\n        *   Back: A root widget that sets up Material Design theme, navigation, title, and other app-level configurations.\n    *   **Card 13:**\n        *   Front: How do you navigate to a new screen (page/route)?\n        *   Back: Using `Navigator.push(context, MaterialPageRoute(builder: (context) => NewScreen()))`.\n    *   **Card 14:**\n        *   Front: How do you return to the previous screen?\n        *   Back: Using `Navigator.pop(context)`.\n    *   **Card 15:**\n        *   Front: What is `MaterialPageRoute`?\n        *   Back: A modal route that replaces the entire screen with a platform-adaptive transition (used with `Navigator`).\n\n5.  **Format as JSON:**\n    *   Create a root JSON array `[]`.\n    *   For each drafted card, create a JSON object `{}`.\n    *   Inside each object, add two key-value pairs: `\"front\": \"...\"` and `\"back\": \"...\"`.\n    *   Ensure all strings are properly quoted and commas separate the objects within the array.\n    *   Validate the final JSON structure.\n\n6.  **Review and Refine:**\n    *   Check if the flashcards cover the requested topics (Fundamentals, UI, Navigation). Yes.\n    *   Check if the number of flashcards is <= 15. Yes, exactly 15.\n    *   Check if the format is correct JSON. Yes.\n    *   Check if the front/back content is clear, concise, and accurate for a beginner level. Yes.\n    *   Ensure consistency (e.g., using code formatting ` `` ` where appropriate).\n\nThis structured approach ensures all constraints are met and the generated content is relevant, accurate, and well-formatted."},
            {text: "```json\n[\n  {\n    \"front\": \"What is Flutter?\",\n    \"back\": \"An open-source UI software development kit (SDK) by Google for building natively compiled applications for mobile, web, and desktop from a single codebase.\"\n  },\n  {\n    \"front\": \"What programming language does Flutter use?\",\n    \"back\": \"Dart.\"\n  },\n  {\n    \"front\": \"What is the core principle of Flutter UI?\",\n    \"back\": \"'Everything is a Widget'. UI is built by composing various widgets together.\"\n  },\n  {\n    \"front\": \"What is a `StatelessWidget`?\",\n    \"back\": \"A widget whose properties (state) are immutable once built. It doesn't change dynamically over time.\"\n  },\n  {\n    \"front\": \"What is a `StatefulWidget`?\",\n    \"back\": \"A widget that can change its appearance in response to user interactions or data changes. It maintains state that can be updated.\"\n  },\n  {\n    \"front\": \"What is the function of `main()` and `runApp()`?\",\n    \"back\": \"`main()` is the entry point of the app. `runApp()` takes the root widget and attaches it to the screen.\"\n  },\n  {\n    \"front\": \"What is the purpose of the `Scaffold` widget?\",\n    \"back\": \"Provides a standard Material Design visual layout structure, including AppBar, Body, FloatingActionButton, Drawer, etc.\"\n  },\n  {\n    \"front\": \"How do you arrange widgets vertically?\",\n    \"back\": \"Using the `Column` widget.\"\n  },\n  {\n    \"front\": \"How do you arrange widgets horizontally?\",\n    \"back\": \"Using the `Row` widget.\"\n  },\n  {\n    \"front\": \"What widget is commonly used for padding and margins?\",\n    \"back\": \"`Padding` widget for space inside its border, `Container` widget's `padding` and `margin` properties.\"\n  },\n  {\n    \"front\": \"How do you display text?\",\n    \"back\": \"Using the `Text` widget.\"\n  },\n  {\n    \"front\": \"What widget provides basic app structure like theming and navigation?\",\n    \"back\": \"`MaterialApp` (for Material Design) or `CupertinoApp` (for iOS style).\"\n  },\n  {\n    \"front\": \"How do you navigate to a new screen?\",\n    \"back\": \"Using `Navigator.push(context, MaterialPageRoute(builder: (context) => YourNewScreen()))`.\"\n  },\n  {\n    \"front\": \"How do you return to the previous screen?\",\n    \"back\": \"Using `Navigator.pop(context)`.\"\n  },\n  {\n    \"front\": \"What is `Hot Reload` in Flutter?\",\n    \"back\": \"A feature allowing you to inject updated source code files into the running Dart VM, quickly updating the UI without losing app state.\"\n  }\n]\n```"},
          ],
        },
      ],
    });

    export const GenerateQuizAiModel = model.startChat({
      generationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Generate quiz on topic:Flutter Fundamentals, User Interface(UI) Development,Basic App Navigation with Question and Options along with correct answers in json format\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "Here's a breakdown of the thought process to generate the Flutter quiz JSON:\n\n1.  **Understand the Request:** The user wants a quiz about \"Flutter Fundamentals,\" \"UI Development,\" and \"Basic App Navigation.\" The output needs to be in JSON format, including questions, multiple-choice options, and the correct answer for each question.\n\n2.  **Identify Key Concepts within Each Topic:**\n\n    *   **Flutter Fundamentals:**\n        *   What is Flutter? (SDK, UI toolkit)\n        *   What language does Flutter use? (Dart)\n        *   What are Widgets? (Building blocks of UI)\n        *   Types of Widgets? (Stateless vs. Stateful)\n        *   What is `main()`? (Entry point)\n        *   What is `runApp()`? (Starts the app)\n        *   Hot Reload/Hot Restart? (Developer productivity features)\n        *   Platform target? (Cross-platform - iOS, Android, Web, Desktop)\n\n    *   **UI Development:**\n        *   Basic layout widgets (`Row`, `Column`, `Stack`, `Container`, `Center`)\n        *   Common UI elements (`Text`, `Image`, `Icon`, `Button` variants like `ElevatedButton`, `TextButton`, `IconButton`)\n        *   Styling (`TextStyle`, `ThemeData`, `Color`, `Padding`, `Margin`)\n        *   Stateless vs. Stateful in UI context (When to use which)\n        *   `Scaffold` widget (Basic app structure - AppBar, Body, FloatingActionButton)\n        *   `ListView` / `GridView` (Scrolling lists)\n        *   `BuildContext` (Widget's location in the tree)\n\n    *   **Basic App Navigation:**\n        *   `Navigator` widget (Manages routes)\n        *   `MaterialPageRoute` (Standard page transition)\n        *   `Navigator.push()` (Go to a new screen)\n        *   `Navigator.pop()` (Go back from a screen)\n        *   Named routes (`Navigator.pushNamed()`)\n        *   Passing data between screens (Constructor arguments, `Navigator.push()` arguments)\n\n3.  **Formulate Quiz Questions:** Create questions that test understanding of these concepts. Aim for a mix of difficulty levels (some straightforward definitions, some requiring understanding of how things work together).\n\n    *   *Initial Draft Ideas:*\n        *   What is Flutter? (Too simple maybe?) -> Better: What *best describes* Flutter?\n        *   Dart language question. (Essential)\n        *   What's a widget? (Essential)\n        *   Difference between Stateless and Stateful. (Crucial)\n        *   How do you arrange widgets horizontally? (`Row`)\n        *   How do you arrange widgets vertically? (`Column`)\n        *   What widget provides basic app structure? (`Scaffold`)\n        *   How to display text? (`Text`)\n        *   How to make a button clickable? (`ElevatedButton`, `onPressed`)\n        *   How to go to a new screen? (`Navigator.push`)\n        *   How to go back? (`Navigator.pop`)\n        *   What is the entry point? (`main()`)\n        *   What starts the UI? (`runApp()`)\n        *   What widget centers its child? (`Center`)\n        *   What is Hot Reload useful for? (Faster UI updates)\n\n4.  **Develop Multiple-Choice Options:** For each question:\n    *   Create one clearly correct answer.\n    *   Create plausible but incorrect distractors. Distractors should relate to the topic but be wrong in some way (e.g., mixing up widget names, misstating functionality, mentioning concepts from other frameworks).\n    *   Ensure options are grammatically consistent.\n    *   Avoid \"all of the above\" or \"none of the above\" unless truly necessary and well-crafted.\n\n5.  **Structure the JSON:**\n    *   Decide on the overall structure. A root object containing a list (array) of quiz questions seems appropriate. Let's call the list `quiz`.\n    *   Each item in the `quiz` list will be an object representing a single question.\n    *   Each question object needs fields for:\n        *   `question`: The text of the question (string).\n        *   `options`: A list (array) of possible answers (strings).\n        *   `correctAnswer`: The correct answer string (must exactly match one of the options).\n        *   `topic`: (Optional but helpful) The category the question belongs to (string: \"Fundamentals\", \"UI Development\", \"Navigation\"). This helps ensure coverage.\n\n6.  **Populate the JSON with Questions and Options:** Go through the formulated questions and options, translating them into the JSON structure. Double-check:\n    *   Spelling and grammar.\n    *   Correctness of the `correctAnswer`.\n    *   Plausibility of distractors.\n    *   Consistency in formatting.\n    *   Ensure `correctAnswer` exactly matches one of the strings in the `options` array.\n\n7.  **Review and Refine:**\n    *   Read through the complete JSON. Does it make sense?\n    *   Is the difficulty level appropriate for \"Fundamentals\"?\n    *   Is there a good mix of topics? (Check the `topic` field counts if added).\n    *   Are there any ambiguous questions or options?\n    *   Is the JSON syntax valid? (Use a JSON validator if unsure).\n    *   *Self-Correction Example:* Initially, I might have made a question too complex. Refine it to focus on a single core concept. Or, maybe I forgot a key widget like `Scaffold` - add a question for it. Ensure navigation covers both pushing and popping. Make sure `StatelessWidget` vs `StatefulWidget` is covered.\n\n8.  **Final Output Generation:** Format the JSON neatly with proper indentation for readability. Add introductory and concluding remarks as requested by the user interaction model (though not part of the JSON itself)."},
            {text: "```json\n{\n  \"quizTitle\": \"Flutter Fundamentals, UI & Navigation\",\n  \"questions\": [\n    {\n      \"id\": 1,\n      \"topic\": \"Fundamentals\",\n      \"question\": \"What programming language is primarily used for Flutter development?\",\n      \"options\": [\n        \"JavaScript\",\n        \"Kotlin\",\n        \"Swift\",\n        \"Dart\"\n      ],\n      \"correctAnswer\": \"Dart\"\n    },\n    {\n      \"id\": 2,\n      \"topic\": \"Fundamentals\",\n      \"question\": \"In Flutter, everything is a _______.\",\n      \"options\": [\n        \"Component\",\n        \"Module\",\n        \"Widget\",\n        \"Service\"\n      ],\n      \"correctAnswer\": \"Widget\"\n    },\n    {\n      \"id\": 3,\n      \"topic\": \"Fundamentals\",\n      \"question\": \"Which type of widget is used for UI elements that do not depend on any mutable state?\",\n      \"options\": [\n        \"StatefulWidget\",\n        \"StatelessWidget\",\n        \"MutableWidget\",\n        \"StaticWidget\"\n      ],\n      \"correctAnswer\": \"StatelessWidget\"\n    },\n    {\n      \"id\": 4,\n      \"topic\": \"Fundamentals\",\n      \"question\": \"What is the main function that serves as the entry point for a Flutter application?\",\n      \"options\": [\n        \"runApp()\",\n        \"build()\",\n        \"main()\",\n        \"createState()\"\n      ],\n      \"correctAnswer\": \"main()\"\n    },\n     {\n      \"id\": 5,\n      \"topic\": \"Fundamentals\",\n      \"question\": \"What feature allows developers to quickly see the results of their code changes without restarting the app?\",\n      \"options\": [\n        \"Cold Boot\",\n        \"Full Restart\",\n        \"Hot Reload\",\n        \"Code Compilation\"\n      ],\n      \"correctAnswer\": \"Hot Reload\"\n    },\n    {\n      \"id\": 6,\n      \"topic\": \"UI Development\",\n      \"question\": \"Which widget is used to arrange children linearly along a horizontal or vertical axis?\",\n      \"options\": [\n        \"Stack\",\n        \"Container\",\n        \"Row/Column\",\n        \"Center\"\n      ],\n      \"correctAnswer\": \"Row/Column\"\n    },\n    {\n      \"id\": 7,\n      \"topic\": \"UI Development\",\n      \"question\": \"Which widget provides a standard visual layout structure, including components like AppBar and Body?\",\n      \"options\": [\n        \"Container\",\n        \"MaterialApp\",\n        \"Scaffold\",\n        \"Center\"\n      ],\n      \"correctAnswer\": \"Scaffold\"\n    },\n    {\n      \"id\": 8,\n      \"topic\": \"UI Development\",\n      \"question\": \"How do you display simple text on the screen?\",\n      \"options\": [\n        \"TextField\",\n        \"Label\",\n        \"StringView\",\n        \"Text\"\n      ],\n      \"correctAnswer\": \"Text\"\n    },\n    {\n      \"id\": 9,\n      \"topic\": \"UI Development\",\n      \"question\": \"Which widget is commonly used to add padding or margin around another widget?\",\n      \"options\": [\n        \"Padding / Container\",\n        \"SizedBox\",\n        \"Spacer\",\n        \"MarginBox\"\n      ],\n      \"correctAnswer\": \"Padding / Container\"\n    },\n    {\n      \"id\": 10,\n      \"topic\": \"UI Development\",\n      \"question\": \"What widget would you typically use to create a clickable button with elevation?\",\n      \"options\": [\n        \"TextButton\",\n        \"IconButton\",\n        \"GestureDetector\",\n        \"ElevatedButton\"\n      ],\n      \"correctAnswer\": \"ElevatedButton\"\n    },\n    {\n      \"id\": 11,\n      \"topic\": \"Navigation\",\n      \"question\": \"Which class is primarily responsible for managing routes (screens) in a Flutter app?\",\n      \"options\": [\n        \"RouteManager\",\n        \"ScreenController\",\n        \"Navigator\",\n        \"PageHandler\"\n      ],\n      \"correctAnswer\": \"Navigator\"\n    },\n    {\n      \"id\": 12,\n      \"topic\": \"Navigation\",\n      \"question\": \"How do you typically navigate to a new screen (push a new route onto the stack)?\",\n      \"options\": [\n        \"Navigator.navigateTo(context, NewScreen())\",\n        \"Navigator.push(context, MaterialPageRoute(builder: (context) => NewScreen()))\",\n        \"Navigator.open(context, NewScreen())\",\n        \"Navigator.go(context, '/newScreen')\"\n      ],\n      \"correctAnswer\": \"Navigator.push(context, MaterialPageRoute(builder: (context) => NewScreen()))\"\n    },\n    {\n      \"id\": 13,\n      \"topic\": \"Navigation\",\n      \"question\": \"How do you return from the current screen back to the previous one (pop the current route)?\",\n      \"options\": [\n        \"Navigator.back(context)\",\n        \"Navigator.remove(context)\",\n        \"Navigator.pop(context)\",\n        \"Navigator.close(context)\"\n      ],\n      \"correctAnswer\": \"Navigator.pop(context)\"\n    },\n    {\n      \"id\": 14,\n      \"topic\": \"Navigation\",\n      \"question\": \"What is the purpose of `MaterialPageRoute`?\",\n      \"options\": [\n        \"To define the visual structure of a page.\",\n        \"To handle data fetching for a page.\",\n        \"To manage the state of a page.\",\n        \"To wrap a widget and provide platform-adaptive transitions for navigation.\"\n      ],\n      \"correctAnswer\": \"To wrap a widget and provide platform-adaptive transitions for navigation.\"\n    },\n    {\n        \"id\": 15,\n        \"topic\": \"UI Development\",\n        \"question\": \"If you need a widget that can rebuild its UI when its internal data changes, which base class should you extend?\",\n        \"options\": [\n          \"StatelessWidget\",\n          \"ComponentWidget\",\n          \"StatefulWidget\",\n          \"DynamicWidget\"\n        ],\n        \"correctAnswer\": \"StatefulWidget\"\n      }\n  ]\n}\n```"},
          ],
        },
      ],
    });